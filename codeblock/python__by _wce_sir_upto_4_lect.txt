#L1.1 notes:
# Python Keywords

Keywords are the reserved words in python

We can't use a keyword as variable name, function name or any other identifier

Keywords are case sentive

#Get all keywords in python 3.6

import keyword

print(keyword.kwlist)
print("Total number of keywords ", len(keyword.kwlist))

# Identifiers

Identifier is the name given to entities like class, functions, variables etc. in Python. It helps differentiating one entity from another.

Rules for Writing Identifiers:

1. Identifiers can be a combination of letters in lowercase (a to z) or uppercase (A to Z) or digits (0 to 9) or an underscore (_).

2. An identifier cannot start with a digit. 1variable is invalid, but variable1 is perfectly fine.

3. Keywords cannot be used as identifiers.

global = 1

 We cannot use special symbols like !, @, #, $, % etc. in our identifier.

abc12 = 10             #can't use special symbols as an identifier
#-----------------------------
#1.2
# Python Comments

Comments are lines that exist in computer programs that are ignored by compilers and interpreters. 

Including comments in programs makes code more readable for humans as it provides some information or explanation about what each part of a program is doing.

In general, it is a good idea to write comments while you are writing or updating a program as it is easy to forget your thought process later on, and comments written later may be less useful in the long term. 

In Python, we use the hash (#) symbol to start writing a comment.

#Print Hello, world to console
print("Hello, world 2")

# Multi Line Comments

If we have comments that extend multiple lines, one way of doing it is to use hash (#) in the beginning of each line.

#This is a long comment
#and it extends 
#Multiple lines

Another way of doing this is to use triple quotes, either ''' or """.

"""This is also a
perfect example of
multi-line comments"""

# DocString in python

Docstring is short for documentation string.

It is a string that occurs as the first statement in a module, function, class, or method definition.

def double(num):
    """
    function to double the number
    """
    return 2 * num

print double(10)

print double.__doc__ #Docstring is available to us as the attribute __doc__ of the function

# Python Indentation

1. Most of the programming languages like C, C++, Java use braces { } to define a block of code. Python uses indentation.

2. A code block (body of a function, loop etc.) starts with indentation and ends with the first unindented line. The amount of indentation is up to you, but it must be consistent throughout that block.

3. Generally four whitespaces are used for indentation and is preferred over tabs.

for i in range(10):
    print i

Indentation can be ignored in line continuation. But it's a good idea to always indent. It makes the code more readable.

if True:
    print "Machine Learning"
    c = "AAIC"

if True: print "Machine Learning"; c = "AAIC"

# Python Statement

Instructions that a Python interpreter can execute are called statements.

Examples:

 a = 1  #single statement

# Multi-Line Statement

In Python, end of a statement is marked by a newline character. But we can make a statement extend over multiple lines with the line continuation character (\).

a = 1 + 2 + 3 + \
    4 + 5 + 6 + \
    7 + 8

print a

#another way is
a = (1 + 2 + 3 +
    4 + 5 + 6 + 
    7 + 8)
print a

a = 10; b = 20; c = 30   #put multiple statements in a single line using ;
#____________________________________________________________
L-2.1:
#______________________________________
# Variables

A variable is a location in memory used to store some data (value).

They are given unique names to differentiate between different memory locations. The rules for writing a variable name is same as the rules for writing identifiers in Python.

We don't need to declare a variable before using it. In Python, we simply assign a value to a variable and it will exist. We don't even have to declare the type of the variable. This is handled internally according to the type of value we assign to the variable.

# Variable Assignments

#We use the assignment operator (=) to assign values to a variable

a = 10
b = 5.5
c = "ML"

# Multiple Assignments

a, b, c = 10, 5.5, "ML"

a = b = c = "AI" #assign the same value to multiple variables at once

# Storage Locations

x = 3

print(id(x))               #print address of variable x

y = 3

print(id(y))               #print address of variable y

Observation:

x and y points to same memory location
    

y = 2
print(id(y))               #print address of variable y

# Data Types 

Every value in Python has a datatype. Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes.

# Numbers

Integers, floating point numbers and complex numbers falls under Python numbers category. They are defined as int, float and complex class in Python.

We can use the type() function to know which class a variable or a value belongs to and the isinstance() function to check if an object belongs to a particular class.

a = 5                               #data type is implicitly set to integer
print(a, " is of type", type(a))

a = 2.5                            #data type is changed to float
print(a, " is of type", type(a))

a = 1 + 2j                          #data type is changed to complex number
print(a, " is complex number?") 
print(isinstance(1+2j, complex))

# Boolean

 Boolean represents the truth values False and True

a = True                          #a is a boolean type
print(type(a))

# Python Strings

String is sequence of Unicode characters. 

We can use single quotes or double quotes to represent strings. 

Multi-line strings can be denoted using triple quotes, ''' or """.

A string in Python consists of a series or sequence of characters - letters, numbers, and special characters. 

Strings can be indexed - often synonymously called subscripted as well. 

Similar to C, the first character of a string has the index 0.

s = "This is Online AI course"
print(s)

print(s[0])
#last char s[len(s)-1] or s[-1]

#slicing
s[5:]

# Python List

List is an ordered sequence of items. It is one of the most used datatype in Python and is very flexible. All the items in a list do not need to be of the same type.

Declaring a list is , Items separated by commas are enclosed within brackets [ ].

a = [10, 20.5, "Hello"]
print(a[1])               #print 1st index element

Lists are mutable, meaning, value of elements of a list can be altered.

a[1] = 30.7
print(a)

# Python Tuple

Tuple is an ordered sequence of items same as list.The only difference is that tuples are immutable. Tuples once created cannot be modified.

t = (1, 1.5, "ML")

print(t[1]) #extract particular element

t[1] = 1.25

# Python Set

Set is an unordered collection of unique items. Set is defined by values separated by comma inside braces { }. Items in a set are not ordered.

a = {10, 30, 20, 40, 5}
print(a)

print(type(a))             #print type of a

We can perform set operations like union, intersection on two sets. Set have unique values.

s = {10, 20, 20, 30, 30, 30}
print(s)                    #automatically set won't consider duplicate elements

print(s[1]) #we can't print particular element in set because 
            #it's unorder collections of items

# Python Dictionary

Dictionary is an unordered collection of key-value pairs.

In Python, dictionaries are defined within braces {} with each item being a pair in the form key:value. Key and value can be of any type.

d = {'a': "apple", 'b': "bat"}
print d['a']

# Conversion between Datatypes

We can convert between different data types by using different type conversion functions like int(), float(), str() etc.

float(5)     #convert interger to float using float() method

int(100.5)   #convert float to integer using int() method

str(20)      #convert integer to string

Conversion to and from string must contain compatible values.

int('10p')

user = "satish"
lines = 100

print("Congratulations, " + user + "! You just wrote " + str(lines) + " lines of code" )
#remove str and gives error

We can convert one sequence to other

a = [1, 2, 3]

print(type(a))      #type of a is list 

s = set(a)          #convert list to set using set() method

print(type(s))      #now type of s is set

list("Hello")       #convert String to list using list() method
#____________________________________________________
#L-2.2
#------------------
# Python Input and Output

# Python Output

We use the print() function to output data to the standard output device

print("Hello World")

a = 10
print("The value of a is", a) #python 3
print "The value of a is " + str(a)

# Output Formatting

a = 10; b = 20 #multiple statements in single line.

print("The value of a is {} and b is {}".format(a, b))    #default

a = 10; b = 20  #multiple statements in single line

print("The value of b is {1} and a is {0}".format(a, b)) #specify position of arguments

#we can use keyword arguments to format the string
print("Hello {name}, {greeting}".format(name="satish", greeting="Good Morning"))

#we can combine positional arguments with keyword arguments
print('The story of {0}, {1}, and {other}'.format('Bill', 'Manfred',
                                                       other='Georg'))

# Python Input

want to take the input from the user. In Python, we have the input() function to allow this. 

num = input("Enter a number: ")
print num
_____________________________________________________________________
#L-3
#______________________
# Operators

Operators are special symbols in Python that carry out arithmetic or logical computation. The value that the operator operates on is called the operand.

# Operator Types

1. Arithmetic operators
    
2. Comparison (Relational) operators

3. Logical (Boolean) operators

4. Bitwise operators

5. Assignment operators

6. Special operators

# Arithmetic Operators

Arithmetic operators are used to perform mathematical operations like addition, subtraction, multiplication etc.

    + , -, *, /, %, //, **  are arithmetic operators

Example:

x, y = 10, 20

#addition
print(x + y)

#subtraction(-)

#multiplication(*)

#division(/)

#modulo division (%)

#Floor Division (//)

#Exponent (**)

# Comparision Operators

Comparison operators are used to compare values. It either returns True or False according to the condition.

    >, <, ==, !=, >=, <= are comparision operators

a, b = 10, 20         

print(a < b)  #check a is less than b

#check a is greater than b

#check a is equal to b

#check a is not equal to b (!=)

#check a greater than or equal to b

#check a less than or equal to b


# Logical Operators

Logical operators are  **and, or, not** operators.

a, b = True, False

#print a and b
print(a and b)

#print a or b

#print not b


# Bitwise operators

Bitwise operators act on operands as if they were string of binary digits. It operates bit by bit

    &,  |,  ~,  ^,  >>,  << are Bitwise operators

a, b = 10, 4

#Bitwise AND
print(a & b)

#Bitwise OR


#Bitwise NOT


#Bitwise XOR


#Bitwise rightshift


#Bitwise Leftshift


# Assignment operators

Assignment operators are used in Python to assign values to variables.

a = 5 is a simple assignment operator that assigns the value 5 on the right to the variable a on the left.

    =,  +=,  -=,  *=,  /=,  %=,  //=,  **=, &=,  |=,  ^=,  >>=,  <<= are Assignment operators

a = 10

a += 10         #add AND
print(a)

#subtract AND (-=)

#Multiply AND (*=)

#Divide AND (/=)

#Modulus AND (%=)

#Floor Division (//=)

#Exponent AND (**=)


# Special Operators

# Identity Operators

**is and is not** are the identity operators in Python. 

They are used to check if two values (or variables) are located on the same part of the memory.

a = 5
b = 5
print(a is b)    #5 is object created once both a and b points to same object

#check is not

l1 = [1, 2, 3]
l2 = [1, 2, 3]
print(l1 is l2)

s1 = "Satish"
s2 = "Satish"
print(s1 is not s2)

# MemberShip Operators

**in and not in** are the membership operators in Python. 
    
They are used to test whether a value or variable is found in a sequence (string, list, tuple, set and   dictionary).

lst = [1, 2, 3, 4]
print(1 in lst)       #check 1 is present in a given list or not

#check 5 is present in a given list


d = {1: "a", 2: "b"}
print(1 in d)
#______________________________________________________
L-4.1:
#_______________________
# Python if ... else Statement

The **if…elif…else** statement is used in Python for decision making.

# if statement syntax

    if test expression:

        statement(s)

The program evaluates the test expression and will execute statement(s) only if the text expression is True.

If the text expression is False, the statement(s) is not executed.

Python interprets non-zero values as True. None and 0 are interpreted as False.

# Example

num = 10

# try 0, -1 and None
if -1:
    print("Number is positive")
print("This will print always")      #This print statement always print

#change number 


# if ... else Statement

# Syntax:

    if test expression:
    
        Body of if

    else: 
    
        Body of else

# Example

num = 10
if num < 0:
    print("Positive number")
else:
    print("Negative Number")

# if...elif...else Statement

# Syntax:

    if test expression:

        Body of if
    elif test expression:
    
        Body of elif
    else: 
    
        Body of else

# Example:

num = 10

if num > 10:
    print("Positive number")
elif num < 10:
    print("ZERO")
elif False:
    print(" Nothing")
else:
    print("Negative Number")

# Nested if Statements

We can have a if...elif...else statement inside another if...elif...else statement. This is called nesting in computer programming.

# Example:

num = 10.5

if num <= 0:
    if num == 0:
        print("Zero")
    else:
        print("Positive number")
else:
    print("Negative Number")

# Python program to find the largest element among three Numbers

num1 = 100
num2 = 50
num3 = 150

if (num1 >= num2) and (num1 >= num3):           #logical operator   and
    largest = num1
elif (num2 >= num1) and (num2 >= num3):
    largest = num2
else:
    largest = num3
print("Largest element among three numbers is: {}".format(largest))

#______________________
L:4.2
#-------------------
# Python for Loop

The for loop in Python is used to iterate over a sequence (list, tuple, string) or other iterable objects. 
    
Iterating over a sequence is called traversal.

# Syntax:

    for element in sequence :

        Body of for

Here, element is the variable that takes the value of the item inside the sequence on each iteration.

Loop continues until we reach the last item in the sequence. 

# Flow Chart

![title](forLoop.jpg)

# Example

#Find product of all numbers present in a list

lst = [10, 20, 30, 40, 50]

product = 1
#iterating over the list
for ele in lst:
    print(type(ele))
    product *= ele

print("Product is: {}".format(product))

ele

# range() function

We can generate a sequence of numbers using range() function. range(10) will generate numbers from 0 to 9 (10 numbers).

We can also define the start, stop and step size as range(start,stop,step size). step size defaults to 1 if not provided.

This function does not store all the values in memory, it would be inefficient. So it remembers the start, stop, step size and generates the next number on the go.

#print range of 10
for i in range(4,-10,-2):
    print(i)

#print range of numbers from 1 to 20 with step size of 2
for i in range(1, 20, 2):
    print(i)

lst = ["satish", "srinu", "murali", "naveen", "bramha"]

#iterate over the list using index
#for index in range(len(lst)):
#    print(lst[index])
for ele in lst:
    print(ele)

# for loop with else

A for loop can have an optional else block as well. The else part is executed if the items in the sequence used in for loop exhausts.

break statement can be used to stop a for loop. In such case, the else part is ignored.

Hence, a for loop's else part runs if no break occurs.

numbers = [1, 2, 3]

#iterating over the list
for item in numbers:
    print(item)
else:
    print("no item left in the list")

for item in numbers:
    print(item)
    if item % 2 == 0:
        break
else:
    print("no item left in the list")

# Python Program to display all prime numbers within an interval

index1 = 20
index2 = 50

print("Prime numbers between {0} and {1} are :".format(index1, index2))

for num in range(index1, index2+1):      #default step size is 1
    if num > 1:
        isDivisible = False;
        for index in range(2, num):
            if num % index == 0:
                isDivisible = True;
        if not isDivisible:        
            print(num);
    

________________________________
#L : 4.3
# Python while Loop

The while loop in Python is used to iterate over a block of code as long as the test expression (condition) is true.



# Syntax:

    while test_expression:
        
        Body of while

The body of the loop is entered only if the test_expression evaluates to True. 

After one iteration, the test expression is checked again. 

This process continues until the test_expression evaluates to False.

# Example

#Find product of all numbers present in a list

lst = [10, 20, 30, 40, 60]

product = 1
index = 0

while index < len(lst):
    product *= lst[index]
    index += 1

print("Product is: {}".format(product))


# while Loop with else


Same as that of for loop, we can have an optional else block with while loop as well.

The else part is executed if the condition in the while loop evaluates to False. The while loop can be terminated with a break statement.

In such case, the else part is ignored. Hence, a while loop's else part runs if no break occurs and the condition is false.



numbers = [1, 2, 3,4,5]

#iterating over the list
index = 0
while index < len(numbers):
    print(numbers[index])
    index += 1
    
else:
    print("no item left in the list")

# Python Program to check given number is Prime number or not

num = int(input("Enter a number: "))        #convert string to int


isDivisible = False;

i=2;
while i < num:
    if num % i == 0:
        isDivisible = True;
        print ("{} is divisible by {}".format(num,i) )
    i += 1;
    
if isDivisible:
    print("{} is NOT a Prime number".format(num))
else:
    print("{} is a Prime number".format(num))
#----------------------------
L:4.4
#-------------------------------
# Python break and continue Statements

In Python, break and continue statements can alter the flow of a normal loop.

Loops iterate over a block of code until test expression is false, but sometimes we wish to terminate the current iteration or even the whole loop without cheking test expression.

The break and continue statements are used in these cases.

# Python break Statement

Syntax:
    
    break

![title](break.jpg)

![title](break_works.jpg)

# Example

numbers = [1, 2, 3, 4 ,5]
for num in numbers:          #iterating over list
    if num == 3:
        continue
    print(num)
else:
    print("in the else-block")
print("Outside of for loop")

# Python Program to check given number is Prime number or not (using break)


num = int(input("Enter a number: "))        #convert string to int


isDivisible = False;

i=2;
while i < num:
    if num % i == 0:
        isDivisible = True;
        print ("{} is divisible by {}".format(num,i) )
        break; # this line is the only addition.
    i += 1;
    
if isDivisible:
    print("{} is NOT a Prime number".format(num))
else:
    print("{} is a Prime number".format(num))

# Python Continue Statement

syntax:
    
    continue

# Flow Chart

![title](continue.jpg)

![title](continue_works.jpg)

# Example

#print odd numbers present in a list
numbers = [1, 2, 3, 4, 5]

for num in numbers:
    if num % 2 == 0:
        continue
    print(num)
else:
    print("else-block")

________________________________________________________________
upto 4 lecture
________________________________________________________________

